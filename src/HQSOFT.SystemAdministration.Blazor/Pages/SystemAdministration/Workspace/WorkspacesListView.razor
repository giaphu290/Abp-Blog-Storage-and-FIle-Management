@page "/SystemAdministration/Workspaces"

@attribute [Authorize(CoreBackendPermissions.Workspaces.Default)]

@using global::HQSOFT.Common.Blazor.Pages.Component
@using global::HQSOFT.Common.Blazor.Pages.Component.Toolbar

@using global::HQSOFT.CoreBackend.Workspaces
@using global::HQSOFT.CoreBackend.Modules
@using global::HQSOFT.CoreBackend.Permissions
@using global::HQSOFT.CoreBackend.Localization
@using global::HQSOFT.CoreBackend.Shared

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components

@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid

@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.BlockUi
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Notifications
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client

@inherits SystemAdministrationComponentBase
@inject NavigationManager NavigationManager

@inject IUiNotificationService UiNotificationService
@inject IUiMessageService UiMessageService
@inject IPageProgressService PageProgressService
@inject IBlockUiService BlockUiService

@inject IJSRuntime JSRuntime
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider 
@inject IWorkspacesAppService WorkspacesAppService 


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Workspaces"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar"></PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Code"]</FieldLabel>
                        <DxTextBox Text="@Filter.Code" BindValueMode="BindValueMode.OnInput"
                                   TextExpression="@(() => Filter.Code)"
                                   TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.Code), value))" />
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Title"]</FieldLabel>
                        <DxTextBox Text="@Filter.Title" BindValueMode="BindValueMode.OnInput"
                                   TextExpression="@(() => Filter.Title)"
                                   TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.Title), value))" />
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["IsHide"]</FieldLabel>
                        <DxComboBox Data="@IsHideOptions"
                                    Value="@Filter.IsHide"
                                    ValueExpression="(() => Filter.IsHide)"
                                    ValueChanged="@(async (bool? newValue) => {
                                        Filter.IsHide = newValue;
                                        await OnFilterChanged(nameof(Filter.IsHide), newValue);
                                    })"
                                    ValueFieldName="Key"
                                    TextFieldName="Value"
                                    EditFormat="{0}"
                                    DisplayFormat="{0}"
                                    InputCssClass="focus-value"
                                    ShowValidationIcon="true"
                                    DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                    SearchMode="ListSearchMode.AutoSearch"
                                    SearchTextParseMode="ListSearchTextParseMode.GroupWordsByAnd"
                                    SearchFilterCondition="ListSearchFilterCondition.Contains"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                            <Columns>
                                <DxListEditorColumn FieldName="Value" Caption="@L["DisplayName"]" />
                            </Columns>
                        </DxComboBox>
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinSequenceId"]</FieldLabel>
                        <DxSpinEdit Value="@Filter.SequenceIdMin"
                                    ValueExpression="@(() => Filter.SequenceIdMin)"
                                    ValueChanged="@(async (int? code) => await OnFilterChanged(nameof(Filter.SequenceIdMin), code))"
                                    BindValueMode="BindValueMode.OnInput"
                                    InputCssClass="focus-value"
                                    ShowValidationIcon="true">
                        </DxSpinEdit>
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxSequenceId"]</FieldLabel>
                        <DxSpinEdit Value="@Filter.SequenceIdMax"
                                    ValueExpression="@(() => Filter.SequenceIdMax)"
                                    ValueChanged="@(async (int? code) => await OnFilterChanged(nameof(Filter.SequenceIdMax), code))"
                                    BindValueMode="BindValueMode.OnInput"
                                    InputCssClass="focus-value"
                                    ShowValidationIcon="true">
                        </DxSpinEdit>
                    </Field>
                </Column>

            </Row>
        </div>

        <Row>
            <Column ColumnSize="ColumnSize.Is6">
                @if (!ShowAdvancedFilters)
                {
                    <Form id="DocSearchForm" class="mb-3">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Text="@Filter.FilterText" TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.FilterText),value))"
                                          Autofocus="true"
                                          Placeholder="@L["Search"]">
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <SubmitButton Form="DocSearchForm" Clicked="@(()=>GetDataAsync(true))">
                                    <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                                </SubmitButton>
                            </Addon>
                        </Addons>
                    </Form>
                }
            </Column>

            <Column ColumnSize="ColumnSize.Is6">
                <Div Style="text-align: right;">
                    <Button Background="Background.Default" Clicked="() => ShowAdvancedFilters = !ShowAdvancedFilters">
                        @L["SeeAdvancedFilters"]
                        <Icon Name="@(ShowAdvancedFilters ? IconName.ExpandLess : IconName.ExpandMore)" Class="me-1" />
                    </Button>
                </Div>
            </Column>
        </Row>
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="WorkspaceDto"
                  Data="DocList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  SortMode="DataGridSortMode.Single"
                  Sortable
                  ShowPager
                  Responsive
                  ShowPageSizes
                  PageSize="PageSize"
                  PageSizeChanged="PageSizeChanged"
                  PageSizes="@(new int[] { 20, 100, 500, 2500 })"
                  SelectedRows="SelectedDocs"
                  SelectedRowsChanged="@((List<WorkspaceDto> e) => SelectedRowsChanged(e))"
                  SelectionMode="Blazorise.DataGrid.DataGridSelectionMode.Multiple">
            <LoadingTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <RadarSpinner />
                    </Column>
                </Row>
            </LoadingTemplate>
            <EmptyTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@L["NoDataAvailable"]</Heading>
                    </Column>
                </Row>
            </EmptyTemplate>
            <DataGridColumns>
                <DataGridMultiSelectColumn TItem="WorkspaceDto" Width="1rem" />

                <DataGridColumn TItem="WorkspaceDto"
                                Field="Code"
                                Filterable="false"
                                Sortable="false"
                                Caption="#"
                                Width="2rem">
                    <DisplayTemplate>
                        @if (context != null && DocList != null)
                        {
                            int index = (CurrentPage - 1) * PageSize + DocList.ToList().IndexOf(context) + 1;
                            @index
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="WorkspaceDto"
                                Field="Code"
                                Caption="@L["Code"]"
                                Sortable="true">
                    <DisplayTemplate>
                        @if (context.Code != null)
                        {
                            string truncatedCode = TruncateText(context.Code, 20);
                            <a title="@L[$"{context.Code}"]" class="d-block text-left" href="javascript:;"
                               @onclick="() => GoToEditPage(context.Id)">
                                @truncatedCode
                            </a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="WorkspaceDto"
                                Field="Title"
                                Caption="@L["Title"]">
                    <DisplayTemplate>
                        @if (context.Title != null)
                        {
                            if (context.Title != null)
                            {
                                string truncatedCode = TruncateText(context.Title, 30);
                                <a title="@L[$"{context.Title}"]">@truncatedCode</a>
                            }
                        }
                        else
                        {
                            <a> </a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="WorkspaceDto"
                                Field="Icon"
                                Caption="@L["Icon"]">
                    <DisplayTemplate>
                        @if (context.Icon != null)
                        {
                            <i class="@context.Icon" style="font-size: 20px; margin-right: 8px;"></i>
                            @context.Icon
                        }
                        else
                        {
                            <a> </a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="WorkspaceDto"
                                Field="IsHide"
                                Caption="@L["IsHide"]">
                    <DisplayTemplate>
                        @if (context.IsHide)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="WorkspaceDto"
                                Field="SequenceId"
                                Caption="@L["SequenceId"]"
                                TextAlignment="TextAlignment.End">
                    <DisplayTemplate>
                        <a> @context.SequenceId</a>
                    </DisplayTemplate>
                </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

                

<HQSOFTBreadcrumbScreen @ref="BreadcrumbScreen"
                        BreadcrumbItems="BreadcrumbItems" ModuleCode="SA"
                        ScreenUrl="/SystemAdministration/Workspaces" ScreenName="Menu:Workspaces" IsEditForm="false" /> 