@page "/SystemAdministration/SystemSettings"

@attribute [Authorize(CoreBackendPermissions.SystemSettings.Default)]
@using global::HQSOFT.Common.Blazor.Pages.Component
@using global::HQSOFT.Common.Blazor.Pages.Component.Toolbar
@using global::HQSOFT.Common.Blazor.Pages.Component.Validation

@using global::HQSOFT.CoreBackend.Countries
@using global::HQSOFT.CoreBackend.TimeZoneInformations
@using global::HQSOFT.CoreBackend.EnumList
@using global::HQSOFT.CoreBackend.SystemSettings
@using global::HQSOFT.CoreBackend.Localization
@using global::HQSOFT.CoreBackend.Permissions
@using global::HQSOFT.CoreBackend.Shared
@using global::HQSOFT.CoreBackend.Workspaces

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
 
@using DevExpress.Blazor
@using DevExpress.Data.Filtering;
 
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Blazorise.Snackbar
 
@using Volo.Abp.Identity
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.Http.Client
@using Volo.Abp.ObjectMapping
@using Volo.Abp.LanguageManagement
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Progression
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.AspNetCore.Components.Notifications
@using Volo.Abp.AspNetCore.Components.BlockUi
 
@inherits SystemAdministrationComponentBase
@inject NavigationManager NavigationManager
@inject ChangeIconToggleSidebar ChangeIconToggleSidebar
@inject ValidationFormHelper ValidationFormHelper

@inject IUiNotificationService UiNotificationService
@inject IUiMessageService UiMessageService
@inject IPageProgressService PageProgressService
@inject IBlockUiService BlockUiService

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject IWorkspacesAppService WorkspacesAppService

@inject ILanguageAppService LanguageAppService
@inject ICountriesAppService CountriesAppService
@inject ITimeZoneInformationsAppService TimeZoneInformationsAppService
@inject ISystemSettingsAppService SystemSettingsAppService





@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["SystemSettings"]" BreadcrumbItems="BreadcrumbItems"
            Toolbar="Toolbar">
</PageHeader>
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

@* ************************* FORM HEADER ************************* *@
<Row>
    <Column>
        <Card>
            <CardBody>
                <EditForm @ref="EditFormMain" Model="@EditingDoc" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                        <DxFormLayoutItem Caption="@(L["Description"]+ " *")" ColSpanLg="6" ColSpanMd="12">
                            <DxTextBox Text="@EditingDoc.Description"
                                       TextExpression="@(() => EditingDoc.Description)"
                                       TextChanged="@(async (newValue) => {
                                                            EditingDoc.Description = newValue;
                                                            IsDataEntryChanged = true;
                                                })"
                                       BindValueMode="BindValueMode.OnLostFocus"
                                       InputCssClass="focus-value"
                                       ShowValidationIcon="true" />
                            <ValidationMessage For="@(() => EditingDoc.Description)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="@(L["Country"])" ColSpanLg="6" ColSpanMd="12">
                            <DxComboBox DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        Data="@CountryCollection"
                                        Value="@EditingDoc.Country"
                                        ValueExpression="@(() => EditingDoc.Country)"
                                        ValueChanged="@(async (Guid? newValue) => {
                                                             await CountryValueChangedAsync(newValue);
                                                             IsDataEntryChanged = true;
                                             })"
                                        TextFieldName="Descripiton" ValueFieldName="Id"
                                        DisplayFormat="{0} - {1}" EditFormat="{0} - {1}"
                                        InputCssClass="focus-value">
                                <Columns>
                                    <DxListEditorColumn FieldName="Code"
                                                        Caption="@L["Code"]" />
                                    <DxListEditorColumn FieldName="Description"
                                                        Caption="@L["Description"]" />
                                </Columns>
                            </DxComboBox>
                            <ValidationMessage For="@(() => EditingDoc.Country)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="@(L["Language"])" ColSpanLg="6" ColSpanMd="12">
                            <DxComboBox DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        Data="@LanguageCollection"
                                        Value="@EditingDoc.Language"
                                        ValueExpression="@(() => EditingDoc.Language)"
                                        ValueChanged="@(async (Guid? newValue) => {
                                                          await LanguageValueChangedAsync(newValue);
                                                          IsDataEntryChanged = true;
                                             })"
                                        TextFieldName="DisplayName" ValueFieldName="Id"
                                        DisplayFormat="{0} - {1}" EditFormat="{0} - {1}"
                                        InputCssClass="focus-value">
                                <Columns>
                                    <DxListEditorColumn FieldName="CultureName"
                                                        Caption="@L["Code"]" />
                                    <DxListEditorColumn FieldName="DisplayName"
                                                        Caption="@L["Description"]" />
                                </Columns>
                            </DxComboBox>
                            <ValidationMessage For="@(() => EditingDoc.Language)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="@(L["TimeZone"])" ColSpanLg="6" ColSpanMd="12">
                            <DxComboBox DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        Data="@TimeZoneCollection"
                                        Value="@EditingDoc.TimeZone"
                                        ValueExpression="@(() => EditingDoc.TimeZone)"
                                        ValueChanged="@(async (Guid? newValue) => {
                                                          await TimeZoneValueChangedAsync(newValue);
                                                          IsDataEntryChanged = true;
                                             })"
                                        TextFieldName="@nameof(TimeZoneInformationDto.TimeZone)" ValueFieldName="@nameof(TimeZoneInformationDto.Id)"
                                        DisplayFormat="{0} - {1}" EditFormat="{0} - {1}"
                                        InputCssClass="focus-value">
                                <Columns>
                                    <DxListEditorColumn FieldName="@nameof(TimeZoneInformationDto.Abbreviation)"
                                                        Caption="@L["Abbreviation"]" />
                                    <DxListEditorColumn FieldName="@nameof(TimeZoneInformationDto.TimeZone)"
                                                        Caption="@L["TimeZone"]" />
                                </Columns>
                            </DxComboBox>
                            <ValidationMessage For="@(() => EditingDoc.TimeZone)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="@(L["NumberFormat"] + " *")" ColSpanLg="6" ColSpanMd="12">
                            <DxComboBox DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        Data="@NumberFormatCollection"
                                        Value="EditingDoc.NumberFormat"
                                        ValueExpression="@(()=>EditingDoc.NumberFormat)"
                                        ValueChanged="((string? newValue) => {
                                                            EditingDoc.NumberFormat = newValue;
                                                            IsDataEntryChanged = true; })"
                                        TextFieldName="DisplayName" ValueFieldName="DisplayName"
                                        InputCssClass="focus-value" ShowValidationIcon="true" />
                            <ValidationMessage For="@(() => EditingDoc.NumberFormat)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="@(L["DateFormat"] + " *")" ColSpanLg="6" ColSpanMd="12">
                            <DxComboBox DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        Data="@DateFormatCollection"
                                        Value="EditingDoc.DateFormat"
                                        ValueExpression="@(()=>EditingDoc.DateFormat)"
                                        ValueChanged="((string? newValue) => {
                                                                  EditingDoc.DateFormat = newValue;
                                                                  IsDataEntryChanged = true; })"
                                        TextFieldName="DisplayName" ValueFieldName="DisplayName"
                                        InputCssClass="focus-value" ShowValidationIcon="true" />
                            <ValidationMessage For="@(() => EditingDoc.DateFormat)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="@(L["TimeFormat"] + " *")" ColSpanLg="6" ColSpanMd="12">
                            <DxComboBox DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        Data="@TimeFormatCollection"
                                        Value="EditingDoc.TimeFormat"
                                        ValueExpression="@(()=>EditingDoc.TimeFormat)"
                                        ValueChanged="((string? newValue) => {
                                                                 EditingDoc.TimeFormat = newValue;
                                                                 IsDataEntryChanged = true; })"
                                        TextFieldName="DisplayName" ValueFieldName="DisplayName"
                                        InputCssClass="focus-value" ShowValidationIcon="true" />
                            <ValidationMessage For="@(() => EditingDoc.TimeFormat)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="@(L["QuantityPrecision"])" ColSpanLg="6" ColSpanMd="12">
                            <DxComboBox DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        Data="@QuantityPrecisionCollection"
                                        Value="EditingDoc.QuantityPrecision"
                                        ValueExpression="@(()=>EditingDoc.QuantityPrecision)"
                                        ValueChanged="((string? newValue) => {
                                                                    EditingDoc.QuantityPrecision = newValue;
                                                                    IsDataEntryChanged = true; })"
                                        TextFieldName="DisplayName" ValueFieldName="Value"
                                        InputCssClass="focus-value" ShowValidationIcon="true" />
                            <ValidationMessage For="@(() => EditingDoc.QuantityPrecision)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="@(L["PricePrecision"])" ColSpanLg="6" ColSpanMd="12">
                            <DxComboBox DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        Data="@PricePrecisionCollection"
                                        Value="EditingDoc.PricePrecision"
                                        ValueExpression="@(()=>EditingDoc.PricePrecision)"
                                        ValueChanged="((string? newValue) => {
                                                                     EditingDoc.PricePrecision = newValue;
                                                                     IsDataEntryChanged = true; })"
                                        TextFieldName="DisplayName" ValueFieldName="Value"
                                        InputCssClass="focus-value" ShowValidationIcon="true" />
                            <ValidationMessage For="@(() => EditingDoc.PricePrecision)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="@(L["APIMaps"])" ColSpanLg="6" ColSpanMd="12">
                            <DxTextBox Text="@EditingDoc.APIMaps"
                                       TextExpression="@(() => EditingDoc.APIMaps)"
                                       TextChanged="@(async (newValue) => {
                                                            EditingDoc.APIMaps = newValue;
                                                            IsDataEntryChanged = true;
                                                })"
                                       BindValueMode="BindValueMode.OnLostFocus"
                                       InputCssClass="focus-value"
                                       ShowValidationIcon="true" />
                            <ValidationMessage For="@(() => EditingDoc.APIMaps)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="@(L["APILink"])" ColSpanLg="6" ColSpanMd="12">
                            <DxTextBox Text="@EditingDoc.APILink"
                                       TextExpression="@(() => EditingDoc.APILink)"
                                       TextChanged="@(async (newValue) => {
                                                            EditingDoc.APILink = newValue;
                                                            IsDataEntryChanged = true;
                                                })"
                                       BindValueMode="BindValueMode.OnLostFocus"
                                       InputCssClass="focus-value"
                                       ShowValidationIcon="true" />
                            <ValidationMessage For="@(() => EditingDoc.APILink)" />
                        </DxFormLayoutItem>

                    </DxFormLayout>
                </EditForm>
            </CardBody>
        </Card>
        @if (EditingDocId != Guid.Empty)
        {
            <Div>
                <HQSOFTComment TableName="@L["Menu:SystemSettings"]" OnCommentAdded="HandleCommentAdded" ScreenUrl="SystemAdministration/SystemSettings/" DocId="EditingDocId" />
            </Div>
            <Div>
                <HQSOFTFormActivity ScreenUrl="SystemAdministration/SystemSettings/" DocId="EditingDocId" @ref="@formActivity" />
            </Div>
        }
    </Column>

    @* ************************* InteractionForm Section ************************* *@ 

    <Div Class="col-2 layout-side-section" Style="@(ShowInteractionForm?"display: none":"display: block")">
        <Div Class="list-sidebar overlay-sidebar hidden-xs hidden-sm opened">
            <HQSOFTInteractionForm TableName="@L["Menu:SystemSettings"]" TypeTable="content" DocId="@EditingDocId"
                                   Url='/SystemAdministration/SystemSettings' IsInteractionFormDisabled="@(EditingDocId != Guid.Empty ? false : true)" />
        </Div>
    </Div>

</Row>


<HotkeyHandler OnCtrlS="HandleCtrlS" />
<HQSOFTBreadcrumbScreen @ref="BreadcrumbScreen"
                        BreadcrumbItems="BreadcrumbItems" ModuleCode="SA"
                        ScreenUrl="/SystemAdministration/SystemSettings" ScreenName="Menu:SystemSettings" IsEditForm="true" /> 