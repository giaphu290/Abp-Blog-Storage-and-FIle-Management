@page "/SystemAdministration/Screens"

@attribute [Authorize(CoreBackendPermissions.Screens.Default)]

@using global::HQSOFT.Common.Blazor.Pages.Component
@using global::HQSOFT.Common.Blazor.Pages.Component.Toolbar

@using global::HQSOFT.CoreBackend.Screens
@using global::HQSOFT.CoreBackend.Modules
@using global::HQSOFT.CoreBackend.Localization
@using global::HQSOFT.CoreBackend.Shared  @using global::HQSOFT.CoreBackend.Workspaces
@using global::HQSOFT.CoreBackend.Permissions

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components

@using DevExpress.Blazor
@using DevExpress.Blazor.ComboBox
@using DevExpress.Blazor.Grid

@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid

@using Volo.Abp.ObjectMapping
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.AspNetCore.Components.BlockUi
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Notifications
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client

@inherits SystemAdministrationComponentBase
@inject NavigationManager NavigationManager

@inject IUiNotificationService UiNotificationService
@inject IUiMessageService UiMessageService
@inject IPageProgressService PageProgressService
@inject IBlockUiService BlockUiService

@inject IJSRuntime JSRuntime
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider  
@inject IWorkspacesAppService WorkspacesAppService

@inject IScreensAppService ScreensAppService
@inject IModulesAppService ModulesAppService


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Screens"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Code"]</FieldLabel>
                        <DxTextBox Text="@Filter.Code" BindValueMode="BindValueMode.OnInput"
                                   TextExpression="@(() => Filter.Code)"
                                   TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.Code), value))" />
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["ScreenName"]</FieldLabel>
                        <DxTextBox Text="@Filter.ScreenName" BindValueMode="BindValueMode.OnInput"
                                   TextExpression="@(() => Filter.ScreenName)"
                                   TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.ScreenName), value))" />
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Resource Name"]</FieldLabel>
                        <DxTextBox Text="@Filter.ResourceName" BindValueMode="BindValueMode.OnInput"
                                   TextExpression="@(() => Filter.ResourceName)"
                                   TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.ResourceName), value))" />
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Link"]</FieldLabel>
                        <DxTextBox Text="@Filter.Link" BindValueMode="BindValueMode.OnInput"
                                   TextExpression="@(() => Filter.Link)"
                                   TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.Link), value))" />
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MenuIcon"]</FieldLabel>
                        <DxTextBox Text="@Filter.MenuIcon" BindValueMode="BindValueMode.OnInput"
                                   TextExpression="@(() => Filter.MenuIcon)"
                                   TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.MenuIcon), value))" />
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["LanguageKey"]</FieldLabel>
                        <DxTextBox Text="@Filter.LanguageKey" BindValueMode="BindValueMode.OnInput"
                                   TextExpression="@(() => Filter.LanguageKey)"
                                   TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.LanguageKey), value))" />
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Module"]</FieldLabel>
                        <DxComboBox Data="@ModulesCollection"
                                    Value="@Filter.ModuleId"
                                    ValueExpression="(() => Filter.ModuleId)"
                                    ValueChanged="@(async (Guid? newValue) => {
                                                          Filter.ModuleId = newValue;
                                                          await OnFilterChanged(nameof(Filter.ModuleId),newValue);})"
                                    ValueFieldName="@nameof(ModuleDto.Id)"
                                    TextFieldName="@nameof(ModuleDto.Description)"
                                    EditFormat="{1}"
                                    DisplayFormat="{1}"
                                    InputCssClass="focus-value"
                                    ShowValidationIcon="true"
                                    DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                    SearchMode="ListSearchMode.AutoSearch"
                                    SearchTextParseMode="ListSearchTextParseMode.GroupWordsByAnd"
                                    SearchFilterCondition="ListSearchFilterCondition.Contains"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                            <Columns>
                                <DxListEditorColumn FieldName="@nameof(ModuleDto.Code)"
                                                    Caption="@L["Code"]" />
                                <DxListEditorColumn FieldName="@nameof(ModuleDto.Description)"
                                                    Caption="@L["Description"]" />
                            </Columns>
                        </DxComboBox>
                    </Field>
                </Column>

            </Row>

        </div>
        <Row>
            <Column ColumnSize="ColumnSize.Is6">
                <Form id="ScreenSearchForm" class="mb-3">
                    <Addons>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit Text="@Filter.FilterText" TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.FilterText),value))"
                                      Autofocus="true"
                                      Placeholder="@L["Search"]">
                            </TextEdit>
                        </Addon>
                        <Addon AddonType="AddonType.End">
                            <SubmitButton Form="ScreenSearchForm" Clicked="@(()=>GetDataAsync(true))">
                                <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                            </SubmitButton>
                        </Addon>
                    </Addons>
                </Form>
            </Column>

            <Column ColumnSize="ColumnSize.Is6">
                <Div Style="text-align: right;">
                    <Button Background="Background.Default" Clicked="() => ShowAdvancedFilters = !ShowAdvancedFilters">
                        @L["SeeAdvancedFilters"]
                        <Icon Name="@(ShowAdvancedFilters ? IconName.ExpandLess : IconName.ExpandMore)" Class="me-1" />
                    </Button>
                </Div>
            </Column>
        </Row>

    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="ScreenWithNavigationPropertiesDto"
                  Data="DocList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  Sortable
                  ShowPager
                  Responsive
                  ShowPageSizes
                  PageSize="PageSize"
                  PageSizeChanged="PageSizeChanged"
                  SortMode="DataGridSortMode.Single"
                  PageSizes="@(new int[] { 20, 100, 500, 2500 })"
                  SelectedRows="SelectedDocs"
                  SelectionMode="Blazorise.DataGrid.DataGridSelectionMode.Multiple"
                  SelectedRowsChanged="@((List<ScreenWithNavigationPropertiesDto> e) => SelectedRowsChanged(e))"
                  Class="datagrid-detail">
            <LoadingTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <RadarSpinner />
                    </Column>
                </Row>
            </LoadingTemplate>
            <EmptyTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@L["NoDataAvailable"]</Heading>
                    </Column>
                </Row>
            </EmptyTemplate>
            <DataGridColumns>
                <DataGridMultiSelectColumn TItem="ScreenWithNavigationPropertiesDto" Width="1rem" />

                <DataGridColumn TItem="ScreenWithNavigationPropertiesDto"
                                Field="Screen.Code"
                                Filterable="false"
                                Sortable="false"
                                Caption="#"
                                Width="2rem">
                    <DisplayTemplate>
                        @{
                            if (context != null && DocList != null)
                            {
                                int index = (CurrentPage - 1) * PageSize + DocList.ToList().IndexOf(context) + 1;
                                @index
                            }
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="ScreenWithNavigationPropertiesDto"
                                Field="Screen.Code"
                                Caption="@L["Code"]"
                                Sortable="true">
                    <DisplayTemplate>
                        @if (context.Screen.Code != null)
                        {
                            string truncatedCode = TruncateText(context.Screen.Code, 20);
                            <a title="@L[$"{context.Screen.Code}"]" class="d-block text-left" href="javascript:;"
                               @onclick="() => GoToEditPage(context.Screen.Id)">
                                @truncatedCode
                            </a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="ScreenWithNavigationPropertiesDto"
                                Field="Screen.ScreenName"
                                Caption="@L["ScreenName"]">
                    <DisplayTemplate>
                        @if (context.Screen.ScreenName != null)
                        {
                            string truncatedCode = TruncateText(context.Screen.ScreenName, 30);
                            <a title="@L[$"{context.Screen.ScreenName}"]">@truncatedCode</a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="ScreenWithNavigationPropertiesDto"
                                Field="Screen.ResourceName"
                                Caption="@L["ResourceName"]">
                    <DisplayTemplate>
                        @if (context.Screen.ResourceName != null)
                        {
                            string truncatedCode = TruncateText(context.Screen.ResourceName, 30);
                            <a title="@L[$"{context.Screen.ResourceName}"]">@truncatedCode</a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="ScreenWithNavigationPropertiesDto"
                                Field="Screen.Link"
                                Caption="@L["Link"]">
                    <DisplayTemplate>
                        @if (context.Screen.Link != null)
                        {
                            string truncatedCode = TruncateText(context.Screen.Link, 30);
                            <a title="@L[$"{context.Screen.Link}"]">@truncatedCode</a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="ScreenWithNavigationPropertiesDto"
                                Field="Screen.MenuIcon"
                                Caption="@L["MenuIcon"]">
                    <DisplayTemplate>
                        @if (context.Screen.MenuIcon != null)
                        {
                            string truncatedCode = TruncateText(context.Screen.MenuIcon, 30);
                            <a title="@L[$"{context.Screen.MenuIcon}"]">@truncatedCode</a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="ScreenWithNavigationPropertiesDto"
                                Field="Screen.LanguageKey"
                                Caption="@L["LanguageKey"]">
                    <DisplayTemplate>
                        @if (context.Screen.LanguageKey != null)
                        {
                            string truncatedCode = TruncateText(context.Screen.LanguageKey, 30);
                            <a title="@L[$"{context.Screen.LanguageKey}"]">@truncatedCode</a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="ScreenWithNavigationPropertiesDto"
                                Field="Module.Description"
                                Caption="@L["Module"]">
                    <DisplayTemplate>
                        @if (context.Screen.ModuleId != null)
                        {
                            if (context.Module.Description != null)
                            {
                                string truncatedCode = TruncateText(context.Module.Description, 30);
                                <a title="@L[$"{context.Module.Description}"]">@truncatedCode</a>
                            }
                        }
                        else
                        {
                            <a> </a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>


<HQSOFTBreadcrumbScreen @ref="BreadcrumbScreen"
                        BreadcrumbItems="BreadcrumbItems" ModuleCode="SA"
                        ScreenUrl="/SystemAdministration/Screens" ScreenName="Menu:Screens" IsEditForm="false" /> 