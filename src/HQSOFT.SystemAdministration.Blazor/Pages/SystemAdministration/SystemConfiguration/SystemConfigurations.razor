@page "/SystemAdministration/SystemConfigurations/{Id}"

@attribute [Authorize(CoreBackendPermissions.SystemConfigurations.Default)]

@using global::HQSOFT.Common.Blazor.Pages.Component
@using global::HQSOFT.Common.Blazor.Pages.Component.Toolbar
@using global::HQSOFT.Common.Blazor.Pages.Component.Validation

@using global::HQSOFT.CoreBackend.Permissions
@using global::HQSOFT.CoreBackend.Localization
@using global::HQSOFT.CoreBackend.Shared  @using global::HQSOFT.CoreBackend.Workspaces
@using global::HQSOFT.CoreBackend.SystemConfigurations
@using global::HQSOFT.CoreBackend.Modules

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@using DevExpress.Blazor
@using Blazorise
@using Blazorise.DataGrid
@using Blazorise.Components

@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.Http.Client
@using Volo.Abp.AspNetCore.Components.BlockUi
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.AspNetCore.Components.Notifications

@inherits SystemAdministrationComponentBase
@inject NavigationManager NavigationManager
@inject ChangeIconToggleSidebar ChangeIconToggleSidebar
@inject ValidationFormHelper ValidationFormHelper

@inject IBlockUiService BlockUiService
@inject IPageProgressService PageProgressService
@inject IUiNotificationService UiNotificationService
@inject IUiMessageService UiMessageService

@inject IJSRuntime JSRuntime
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject IWorkspacesAppService WorkspacesAppService

@inject ISystemConfigurationsAppService SystemConfigurationsAppService
@inject IModulesAppService ModulesAppService


@* ************************* PAGE HEADER ************************* *@
@{
    string code = string.Empty;
    if (EditingDoc.Code != null && EditingDoc.Code != null)
    {
        code = EditingDoc.Code.Length > 20 ? EditingDoc.Code.Substring(0, 20) + "..." : EditingDoc.Code;
    }
}
<PageHeader Title="@(code + (IsDataEntryChanged? " (*)":""))" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">
</PageHeader>

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />


@* ************************* FORM HEADER ************************* *@
<Row>
    <Column>
        <Card>
            <CardBody>
                <Row>
                    <EditForm @ref="EditFormMain" Model="@EditingDoc" Context="EditFormContext">
                        <DataAnnotationsValidator />
                        <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">

                            <DxFormLayoutItem Caption="@(L["Code"] + " *")" ColSpanLg="3" ColSpanMd="12">
                                <DxTextBox Text="@(EditingDoc.Code)"
                                           TextExpression="@(() => EditingDoc.Code)"
                                           TextChanged="@(async (newValue) => {
                                                            EditingDoc.Code = newValue.ToUpper();
                                                            IsDataEntryChanged = true;
                                        })"
                                           BindValueMode="BindValueMode.OnLostFocus"
                                           InputCssClass="focus-value"
                                           ShowValidationIcon="true" />
                                <ValidationMessage For="@(() => EditingDoc.Code)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem Caption="@L["DateVal"]" ColSpanLg="3" ColSpanMd="12">
                                <DxDateEdit Date="@EditingDoc.DateVal"
                                            DateExpression="@(() => EditingDoc.DateVal)"
                                            DateChanged="@(async (DateOnly newValue) => {
                                                            EditingDoc.DateVal = newValue;
                                                            IsDataEntryChanged = true;
                                        })"
                                            Format="dd/MM/yyyy"
                                            DisplayFormat="dd/MM/yyyy"
                                            InputCssClass="focus-value"
                                            ShowValidationIcon="true" />
                                <ValidationMessage For="@(() => EditingDoc.DateVal)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem Caption="@L["IntVal"]" ColSpanLg="3" ColSpanMd="12">
                                <DxSpinEdit Value="@EditingDoc.IntVal"
                                            ValueExpression="@(() => EditingDoc.IntVal)"
                                            ValueChanged="@(async (int newValue) => {
                                                            EditingDoc.IntVal = newValue;
                                                            IsDataEntryChanged = true;
                                        })"
                                            BindValueMode="BindValueMode.OnInput"
                                            InputCssClass="focus-value"
                                            ShowValidationIcon="true" />
                                <ValidationMessage For="@(() => EditingDoc.IntVal)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem Caption="@L["FloatVal"]" ColSpanLg="3" ColSpanMd="12">
                                <DxSpinEdit Value="@EditingDoc.FloatVal"
                                            ValueExpression="@(() => EditingDoc.FloatVal)"
                                            ValueChanged="@(async (float newValue) => {
                                                            EditingDoc.FloatVal = newValue;
                                                            IsDataEntryChanged = true;
                                        })"
                                            BindValueMode="BindValueMode.OnInput"
                                            InputCssClass="focus-value"
                                            ShowValidationIcon="true" />
                                <ValidationMessage For="@(() => EditingDoc.FloatVal)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem Caption="@L["TextVal"]" ColSpanLg="3" ColSpanMd="12">
                                <DxTextBox Text="@EditingDoc.TextVal"
                                           TextExpression="@(() => EditingDoc.TextVal)"
                                           TextChanged="@(async (string newValue) => {
                                                            EditingDoc.TextVal = newValue;
                                                            IsDataEntryChanged = true;
                                        })"
                                           BindValueMode="BindValueMode.OnInput"
                                           InputCssClass="focus-value"
                                           ShowValidationIcon="true" />
                                <ValidationMessage For="@(() => EditingDoc.TextVal)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem Caption="@L["Note"]" ColSpanLg="3" ColSpanMd="12">
                                <DxTextBox Text="@EditingDoc.Note"
                                           TextExpression="@(() => EditingDoc.Note)"
                                           TextChanged="@(async (string newValue) => {
                                                            EditingDoc.Note = newValue;
                                                            IsDataEntryChanged = true;
                                        })"
                                           BindValueMode="BindValueMode.OnInput"
                                           InputCssClass="focus-value"
                                           ShowValidationIcon="true" />
                                <ValidationMessage For="@(() => EditingDoc.Note)" />
                            </DxFormLayoutItem>

                        </DxFormLayout>
                    </EditForm>
                </Row>
            </CardBody>
        </Card>
        @if (EditingDocId != Guid.Empty)
        {
            <Div>
                <HQSOFTComment TableName="@L["Menu:SystemConfigurations"]" OnCommentAdded="HandleCommentAdded"
                               ScreenUrl='SystemAdministration/SystemConfigurations/' DocId="EditingDocId" />
            </Div>
            <Div>
                <HQSOFTFormActivity DocId="EditingDocId" ScreenUrl='SystemAdministration/SystemConfigurations/' @ref="@formActivity" />
            </Div>
        }
    </Column>
    @* ************************* InteractionForm Section ************************* *@ 
    <Div Class="col-2 layout-side-section" Style="@(ShowInteractionForm?"display: none":"display: block")">
        <Div Class="list-sidebar overlay-sidebar hidden-xs hidden-sm opened">
            <HQSOFTInteractionForm TableName="@L["Menu:SystemConfigurations"]" TypeTable="content" DocId="@EditingDocId"
                                   Url='/SystemAdministration/SystemConfigurations' IsInteractionFormDisabled="@(EditingDocId != Guid.Empty ? false : true)" />
        </Div>
    </Div>
</Row>



<HotkeyHandler OnCtrlS="HandleCtrlS" OnCtrlB="HandleCtrlB" />
<HQSOFTBreadcrumbScreen @ref="BreadcrumbScreen"
                        BreadcrumbItems="BreadcrumbItems" ModuleCode="SA"
                        ScreenUrl="/SystemAdministration/SystemConfigurations" ScreenName="Menu:SystemConfigurations" IsEditForm="true" /> 