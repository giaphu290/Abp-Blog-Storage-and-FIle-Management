@page "/SystemAdministration/Companies"



@attribute [Authorize(CoreBackendPermissions.Companies.Default)]

@using global::HQSOFT.Common.Blazor.Pages.Component
@using global::HQSOFT.Common.Blazor.Pages.Component.Toolbar
@using global::HQSOFT.CoreBackend.Countries
@using global::HQSOFT.CoreBackend.Territories
@using global::HQSOFT.CoreBackend.Provinces
@using global::HQSOFT.CoreBackend.Companies
@using global::HQSOFT.CoreBackend.Permissions
@using global::HQSOFT.CoreBackend.Localization
@using global::HQSOFT.CoreBackend.Shared  @using global::HQSOFT.CoreBackend.Workspaces

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web

@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using DevExpress.Blazor
@using DevExpress.Blazor.ComboBox
@using DevExpress.Blazor.Grid

@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.BlockUi
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Notifications
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client

@inherits SystemAdministrationComponentBase
@inject NavigationManager NavigationManager

@inject IUiNotificationService UiNotificationService
@inject IUiMessageService UiMessageService
@inject IPageProgressService PageProgressService
@inject IBlockUiService BlockUiService

@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject IWorkspacesAppService WorkspacesAppService

@inject ITerritoriesAppService TerritoriesAppService
@inject IProvincesAppService ProvincesAppService
@inject ICompaniesAppService CompaniesAppService
@inject ICountriesAppService CountriesAppService


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Companies"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Code"]</FieldLabel>
                        <DxTextBox Text="@Filter.Code" BindValueMode="BindValueMode.OnInput"
                                   TextExpression="@(() => Filter.Code)"
                                   TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.Code), value))" />
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["CompanyName"]</FieldLabel>
                        <DxTextBox Text="@Filter.Description" BindValueMode="BindValueMode.OnInput"
                                   TextExpression="@(() => Filter.Description)"
                                   TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.Description), value))" />
                    </Field>
                </Column>

                @if (SelectedViewMode != "Tree View")
                {
                    <Column ColumnSize="ColumnSize.Is3">
                        <Field>
                            <FieldLabel>@L["Country"]</FieldLabel>
                            <DxComboBox Data="@CountriesCollection"
                                        Value="@Filter.CountryId"
                                        ValueExpression="(() => Filter.CountryId)"
                                        ValueChanged="@(async (Guid? newValue) => {
                                                          Filter.CountryId = newValue;
                                                          await OnFilterChanged(nameof(Filter.CountryId),newValue);})"
                                        ValueFieldName="@nameof(CountryDto.Id)"
                                        TextFieldName="@nameof(CountryDto.Description)"
                                        EditFormat="{1}"
                                        DisplayFormat="{1}"
                                        InputCssClass="focus-value"
                                        ShowValidationIcon="true"
                                        DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchTextParseMode="ListSearchTextParseMode.GroupWordsByAnd"
                                        SearchFilterCondition="ListSearchFilterCondition.Contains"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                                <Columns>
                                    <DxListEditorColumn FieldName="@nameof(CountryDto.Code)"
                                                        Caption="@L["Code"]" />
                                    <DxListEditorColumn FieldName="@nameof(CountryDto.Description)"
                                                        Caption="@L["Description"]" />
                                </Columns>
                            </DxComboBox>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <Field>
                            <FieldLabel>@L["Territory"]</FieldLabel>
                            <DxComboBox Data="@FilterTerritoriesCollection"
                                        Value="@Filter.TerritoryId"
                                        ValueExpression="(() => Filter.TerritoryId)"
                                        ValueChanged="@(async (Guid? newValue) => {
                                                          Filter.TerritoryId = newValue;
                                                          await OnFilterChanged(nameof(Filter.TerritoryId),newValue);})"
                                        ValueFieldName="@nameof(TerritoryDto.Id)"
                                        TextFieldName="@nameof(TerritoryDto.Description)"
                                        EditFormat="{1}"
                                        DisplayFormat="{1}"
                                        InputCssClass="focus-value"
                                        ShowValidationIcon="true"
                                        DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchTextParseMode="ListSearchTextParseMode.GroupWordsByAnd"
                                        SearchFilterCondition="ListSearchFilterCondition.Contains"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                                <Columns>
                                    <DxListEditorColumn FieldName="@nameof(TerritoryDto.Code)"
                                                        Caption="@L["Code"]" />
                                    <DxListEditorColumn FieldName="@nameof(TerritoryDto.Description)"
                                                        Caption="@L["Description"]" />
                                </Columns>
                            </DxComboBox>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <Field>
                            <FieldLabel>@L["Province"]</FieldLabel>
                            <DxComboBox Data="@FilterProvincesCollection"
                                        Value="@Filter.ProvinceId"
                                        ValueExpression="(() => Filter.ProvinceId)"
                                        ValueChanged="@(async (Guid? newValue) => {
                                                          Filter.ProvinceId = newValue;
                                                          await OnFilterChanged(nameof(Filter.ProvinceId),newValue);})"
                                        ValueFieldName="@nameof(ProvinceDto.Id)"
                                        TextFieldName="@nameof(ProvinceDto.Description)"
                                        EditFormat="{1}"
                                        DisplayFormat="{1}"
                                        InputCssClass="focus-value"
                                        ShowValidationIcon="true"
                                        DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchTextParseMode="ListSearchTextParseMode.GroupWordsByAnd"
                                        SearchFilterCondition="ListSearchFilterCondition.Contains"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                                <Columns>
                                    <DxListEditorColumn FieldName="@nameof(ProvinceDto.Code)"
                                                        Caption="@L["Code"]" />
                                    <DxListEditorColumn FieldName="@nameof(ProvinceDto.Description)"
                                                        Caption="@L["Description"]" />
                                </Columns>
                            </DxComboBox>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <Field>
                            <FieldLabel>@L["ParentCompany"]</FieldLabel>
                            <DxComboBox Data="@ParentCompaniesCollection"
                                        Value="@Filter.ParentCompanyId"
                                        ValueExpression="(() => Filter.ParentCompanyId)"
                                        ValueChanged="@(async (Guid? newValue) => {
                                                          Filter.ParentCompanyId = newValue;
                                                          await OnFilterChanged(nameof(Filter.ParentCompanyId),newValue);})"
                                        ValueFieldName="@nameof(CompanyDto.Id)"
                                        TextFieldName="@nameof(CompanyDto.Description)"
                                        EditFormat="{1}"
                                        DisplayFormat="{1}"
                                        InputCssClass="focus-value"
                                        ShowValidationIcon="true"
                                        DropDownWidthMode="DropDownWidthMode.EditorWidth"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchTextParseMode="ListSearchTextParseMode.GroupWordsByAnd"
                                        SearchFilterCondition="ListSearchFilterCondition.Contains"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                                <Columns>
                                    <DxListEditorColumn FieldName="@nameof(CompanyDto.Code)"
                                                        Caption="@L["Code"]" />
                                    <DxListEditorColumn FieldName="@nameof(CompanyDto.Description)"
                                                        Caption="@L["Description"]" />
                                </Columns>
                            </DxComboBox>
                        </Field>
                    </Column>
                }
            </Row>
        </div>

        <Row>
            <Column ColumnSize="ColumnSize.Is2">
                <Select SelectedValue="SelectedViewMode" SelectedValueChanged="@(async (string newValue) => await ViewModeChangedAsync(newValue))" class="me-3">
                    @foreach (var mode in ViewMode)
                    {
                        <option value="@mode">@mode</option>
                    }
                </Select>
            </Column>

            <Column ColumnSize="ColumnSize.Is6">
                @if (!ShowAdvancedFilters)
                {
                    <Form id="DocSearchForm" class="mb-3">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Text="@Filter.FilterText" TextChanged="@(async (string value) => await OnFilterChanged(nameof(Filter.FilterText),value))"
                                          Autofocus="true"
                                          Placeholder="@L["Search"]">
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <SubmitButton Form="DocSearchForm" Clicked="@(()=>GetDataAsync(true))">
                                    <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                                </SubmitButton>
                            </Addon>
                        </Addons>
                    </Form>
                }
            </Column>

            <Column ColumnSize="ColumnSize.Is4">
                <Div Style="text-align: right;">
                    <Button Background="Background.Default" Clicked="() => ShowAdvancedFilters = !ShowAdvancedFilters">
                        @L["SeeAdvancedFilters"]
                        <Icon Name="@(ShowAdvancedFilters ? IconName.ExpandLess : IconName.ExpandMore)" Class="me-1" />
                    </Button>
                </Div>
            </Column>
        </Row>
    </CardBody>
</Card>


@* ************************* DATA GRID ************************* *@
<Card Display="@((SelectedViewMode != "List View")? Display.None: Display.Always)">
    <CardBody>
        <DataGrid TItem="CompanyWithNavigationPropertiesDto"
                  Data="DocList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  SortMode="DataGridSortMode.Single"
                  Sortable
                  ShowPager
                  Responsive
                  ShowPageSizes
                  PageSize="PageSize"
                  PageSizeChanged="PageSizeChanged"
                  PageSizes="@(new int[] { 20, 100, 500, 2500 })"
                  SelectedRows="SelectedDocs"
                  SelectionMode="Blazorise.DataGrid.DataGridSelectionMode.Multiple"
                  SelectedRowsChanged="@((List<CompanyWithNavigationPropertiesDto> e) => SelectedCompanyRowsChanged(e))">
            <LoadingTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <RadarSpinner />
                    </Column>
                </Row>
            </LoadingTemplate>
            <EmptyTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@L["NoDataAvailable"]</Heading>
                    </Column>
                </Row>
            </EmptyTemplate>
            <DataGridColumns>
                <DataGridMultiSelectColumn TItem="CompanyWithNavigationPropertiesDto" Width="30px" />

                <DataGridColumn TItem="CompanyWithNavigationPropertiesDto"
                                Field="Company.Code"
                                Filterable="false"
                                Sortable="false"
                                Caption="#"
                                Width="10px">
                    <DisplayTemplate>
                        @if (context != null && DocList != null)
                        {
                            int index = (CurrentPage - 1) * PageSize + DocList.ToList().IndexOf(context) + 1;
                            @index
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="CompanyWithNavigationPropertiesDto"
                                Field="Company.Code"
                                Caption="@L["Code"]"
                                Sortable="true">
                    <DisplayTemplate>
                        @if (context.Company.Code != null)
                        {
                            string truncatedCode = TruncateText(context.Company.Code, 20);
                            <a title="@L[$"{context.Company.Code}"]" class="d-block text-left" href="javascript:;"
                               @onclick="() => GoToEditPage(context.Company.Id)">
                                @truncatedCode
                            </a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="CompanyWithNavigationPropertiesDto"
                                Field="Company.Description"
                                Caption="@L["CompanyName"]">
                    <DisplayTemplate>
                        @if (context.Company.Description != null)
                        {
                            string truncatedCode = TruncateText(context.Company.Description, 30);
                            <a title="@L[$"{context.Company.Description}"]">@truncatedCode</a>
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="CompanyWithNavigationPropertiesDto"
                                Field="Company.CountryId"
                                Caption="@L["Country"]">
                    <DisplayTemplate>
                        @if (context.Company.CountryId != null)
                        {
                            var valueCode = CountriesCollection.FirstOrDefault(x => x.Id == context.Company.CountryId)?.Description;
                            if (valueCode != null)
                            {
                                string truncatedCode = TruncateText(valueCode, 30);
                                <a title="@L[$"{valueCode}"]">@truncatedCode</a>
                            }
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="CompanyWithNavigationPropertiesDto"
                                Field="Company.TerritoryId"
                                Caption="@L["Territory"]">
                    <DisplayTemplate>
                        @if (context.Company.TerritoryId != null)
                        {
                            var valueCode = TerritoriesCollection.FirstOrDefault(x => x.Id == context.Company.TerritoryId)?.Description;
                            if (valueCode != null)
                            {
                                string truncatedCode = TruncateText(valueCode, 30);
                                <a title="@L[$"{valueCode}"]">@truncatedCode</a>
                            }
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="CompanyWithNavigationPropertiesDto"
                                Field="Company.ProvinceId"
                                Caption="@L["Province"]">
                    <DisplayTemplate>
                        @if (context.Company.ProvinceId != null)
                        {
                            var valueCode = ProvincesCollection.FirstOrDefault(x => x.Id == context.Company.ProvinceId)?.Description;
                            if (valueCode != null)
                            {
                                string truncatedCode = TruncateText(valueCode, 30);
                                <a title="@L[$"{valueCode}"]">@truncatedCode</a>
                            }
                        }
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="CompanyWithNavigationPropertiesDto"
                                Field="Company.ParentCompanyId"
                                Caption="@L["ParentCompany"]">
                    <DisplayTemplate>
                        @if (context.Company.ParentCompanyId != null)
                        {
                            var valueCode = CompaniesCollection.FirstOrDefault(x => x.Company.Id == context.Company.ParentCompanyId)?.Company.Description;
                            if (valueCode != null)
                            {
                                string truncatedCode = TruncateText(valueCode, 30);
                                <a title="@L[$"{valueCode}"]">@truncatedCode</a>
                            }
                        }
                    </DisplayTemplate>

                </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Card Display="@((SelectedViewMode != "Tree View") ? Display.None : Display.Always)">
    <CardBody>

        <DxTreeView AllowSelectNodes="true"
                    SelectionChanged="SelectionChanged"
                    AnimationType="LayoutAnimationType.Slide"
                    ShowExpandButtons="true"
                    @ref="SampleTreeView">
            <Nodes>
                @foreach (var parentCompany in CompaniesCollection.Where(x => x.Company.ParentCompanyId == null))
                {
                    <DxTreeViewNode IconCssClass="fas fa-folder"
                                    Text="@parentCompany.Company.Description"
                                    AllowSelection="true"
                                    AllowCheck="true"
                                    @oncontextmenu="(e => OnContextMenu(e, parentCompany))">
                        <Nodes>
                            @foreach (var childCompany in CompaniesCollection.Where(x => x.Company.ParentCompanyId == parentCompany.Company.Id))
                            {
                                <DxTreeViewNode IconCssClass="fas fa-folder"
                                                Text="@childCompany.Company.Description"
                                                AllowSelection="true"
                                                AllowCheck="true"
                                                @oncontextmenu="(e => OnContextMenu(e, childCompany))">
                                    <Nodes>
                                        @foreach (var grandChildCompany in CompaniesCollection.Where(x => x.Company.ParentCompanyId == childCompany.Company.Id))
                                        {
                                            <DxTreeViewNode IconCssClass="fas fa-file"
                                                            Text="@grandChildCompany.Company.Description"
                                                            AllowSelection="true"
                                                            AllowCheck="false"
                                                            @oncontextmenu="(e => OnContextMenu(e, grandChildCompany))">
                                            </DxTreeViewNode>
                                        }
                                    </Nodes>
                                </DxTreeViewNode>
                            }
                        </Nodes>
                    </DxTreeViewNode>
                }
            </Nodes>
        </DxTreeView>

        <DxContextMenu @ref="@ContextMenu" ItemClick="@OnItemClick">
            <Items>
                <DxContextMenuItem Text="Edit"></DxContextMenuItem>
                <DxContextMenuItem Text="Add"></DxContextMenuItem>
                <DxContextMenuItem Text="Delete"></DxContextMenuItem>
            </Items>
        </DxContextMenu>

        <DxContextMenu @ref="@ContextMenu2" ItemClick="@OnItemClick">
            <Items>
                <DxContextMenuItem Text="Edit"></DxContextMenuItem>
                <DxContextMenuItem Text="Delete"></DxContextMenuItem>
            </Items>
        </DxContextMenu>

    </CardBody>
</Card>


<HQSOFTBreadcrumbScreen @ref="BreadcrumbScreen"
                        BreadcrumbItems="BreadcrumbItems" ModuleCode="SA"
                        ScreenUrl="/SystemAdministration/Companies" ScreenName="Menu:Companies" IsEditForm="false" /> 